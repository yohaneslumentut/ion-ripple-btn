import { ElementRef, Renderer, EventEmitter } from '@angular/core';
export declare class RippleBtnDirective {
    private renderer;
    el: HTMLElement;
    wrapper: any;
    container: any;
    event: any;
    containerHeight: number;
    isActive: boolean;
    isTapping: boolean;
    isAnimating: boolean;
    pressTimeoutRunning: boolean;
    startTimeStamp: number;
    endTimeStamp: number;
    pressTimeout: any;
    fadeDuration: 400;
    delay: any;
    height: string;
    width: string;
    backgroundColor: string;
    marginTop: string;
    interval: number;
    size: number;
    containerClass: string;
    wrapperClass: string;
    tooltipText: string;
    darken: boolean;
    btnTapped: EventEmitter<any>;
    btnPressed: EventEmitter<any>;
    btnPressup: EventEmitter<any>;
    private _darken;
    private activeBackgroundColor;
    private nonactiveBackgroundColor;
    private rippleBackground;
    constructor(el: ElementRef, renderer: Renderer);
    ngAfterViewInit(): void;
    getWrapperAndContainer(): void;
    setBackgroundColor(): void;
    setDimensions(): void;
    activate(): void;
    deactivate(ripple: any): void;
    resetting(): void;
    pressing(): void;
    tapping(): void;
    onTouchstart(e: any): void;
    startPressWatcher(interval?: number): void;
    stopPressWatcher(): void;
    onTouchend(e: any): void;
    pressUpHandler(): void;
    pressHandler(touchDuration: number): void;
    tapHandler(touchDuration: number): void;
    removeTapRipple(ripple: any): void;
    triggerRipple(dTouch: number, callback: any): boolean;
}
